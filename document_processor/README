# Document Processing System

This system processes financial and administrative documents (invoices, financial statements, bank statements) using OCR and LLMs to extract structured data and provide insights.

## Features

- **Document Classification**: Automatically identifies document types
- **OCR Processing**: Extracts text from images and PDFs
- **Structured Data Extraction**: Converts unstructured text to structured data models
- **LangChain Integration**: Provides advanced analysis and insights
- **Multiple Interfaces**: CLI and Web API

## Architecture

The system follows Clean Architecture principles:

- **Domain Layer**: Core business entities and rules
- **Application Layer**: Use cases and orchestration
- **Infrastructure Layer**: External services implementation
- **Interface Layer**: User interfaces and controllers

## Setup

### Prerequisites

- Python 3.8+
- Required packages:
  - paddlepaddle
  - paddleocr
  - pdf2image
  - google-genai
  - langchain
  - langchain_community
  - flask (for web API)

### Installation

1. Clone the repository
2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```
3. Install system dependencies:
   ```bash
   apt-get install -y poppler-utils  # For PDF processing
   ```

### Configuration

Create a `.env` file with your API keys:

```
GEMINI_API_KEY=your_gemini_api_key
OPENAI_API_KEY=your_openai_api_key
```

## Usage

### Command Line Interface

Process a single file:
```bash
python main.py -f /path/to/document.pdf
```

Process all documents in a directory:
```bash
python main.py -d /path/to/directory
```

Process from text:
```bash
python main.py -t "Text content..." --doc-type facture
```

### Web API

Start the web server:
```bash
python interface/web/api.py
```

Process a document:
```bash
curl -X POST -F "file=@/path/to/document.pdf" http://localhost:5000/process
```

Process text:
```bash
curl -X POST -H "Content-Type: application/json" -d '{"text":"Text content...","document_type":"facture"}' http://localhost:5000/process-text
```

## Document Types

The system supports the following document types:
- `facture`: Invoices
- `bilan`: Financial statements
- `releve_bancaire`: Bank statements

## LangChain Integration

The system uses LangChain to:
1. Generate insights from extracted data
2. Create document-specific processing chains
3. Add agent capabilities for complex analysis

## Extending the System

### Adding New Document Types

1. Create a new Pydantic model in `domain/entities.py`
2. Add the new type to `DocumentType` enum in `domain/document_type.py`
3. Update the model mapping in `DocumentType.get_model_mapping()`
4. Add a template for insights in `ChainService._create_chain_for_document_type()`

### Adding New LLM Providers

1. Create a new provider class in `infrastructure/llm/`